package main

import (
	"context"
	"fmt"
	"github.com/SevereCloud/vksdk/v2/api"
	"github.com/SevereCloud/vksdk/v2/api/params"
	"github.com/SevereCloud/vksdk/v2/events"
	"github.com/SevereCloud/vksdk/v2/longpoll-bot"
	"log"
	"math/rand"
	"strconv"
	"strings"
)

type Player struct {
	id     int
	number int
	ans    string
}
type Game struct {
	Round      int
	GameStage  int
	KIK        int
	Propulsion int
	WantGroom  []int
	Play       []int
	Brides     []Player
	Groom      int
	Question   string
}

func NewGame() *Game {
	g := &Game{}
	g.KIK = 1
	g.Propulsion = 1
	return g
}

const (
	ChatID  = 2000000005
	ModerId = 411634368
)

func (g *Game) AddBrides(id int, number int) {
	g.Brides = append(g.Brides, Player{id, number, ""})
}
func (g *Game) DeleteBrides(id int, number int) bool {
	if id == 0 {
		for i, p := range g.Brides {
			if p.number == number {
				g.Brides = append(g.Brides[:i], g.Brides[i+1:]...)
				return true
			}
		}
	} else {
		for i, p := range g.Brides {
			if p.id == id {
				g.Brides = append(g.Brides[:i], g.Brides[i+1:]...)
				return true
			}
		}
	}
	return false
}
func (g *Game) GetIdNumberBrides(id int, number int) int {
	if id == 0 {
		for _, p := range g.Brides {
			if p.number == number {
				return p.id
			}
		}
	} else {
		for _, p := range g.Brides {
			if p.id == id {
				return p.number
			}
		}
	}
	return 0
}
func (g *Game) AddPlayer(id int) bool {
	for _, p := range g.Play {
		if p == id {
			return false
		}
	}
	g.Play = append(g.Play, id)
	return true
}
func (g *Game) DeletePlayer(id int) bool {
	for i, p := range g.Play {
		if p == id {
			g.Play = append(g.Play[:i], g.Play[i+1:]...)
			return true
		}
	}
	return false
}
func (g *Game) AddWantGroom(id int) bool {
	for _, p := range g.WantGroom {
		if p == id {
			return false
		}
	}
	for _, p := range g.Play {
		if p == id {
			g.WantGroom = append(g.WantGroom, id)
			return true
		}
	}
	return false
}
func (g *Game) DeleteWantGroom(id int) bool {
	for i, p := range g.WantGroom {
		if p == id {
			g.WantGroom = append(g.WantGroom[:i], g.WantGroom[i+1:]...)
			return true
		}
	}
	return false
}
func (g *Game) StartGame() bool {
	if len(g.WantGroom) == 0 || len(g.Play) < 3 {
		return false
	}
	o := rand.Intn(len(g.WantGroom))
	g.Groom = g.WantGroom[o]
	g.DeletePlayer(g.Groom)
	g.DeletePlayer(g.Groom)
	s := len(g.Play)
	for i := 1; i <= s; i++ {
		l := rand.Intn(len(g.Play))
		BridesID := g.Play[l]
		g.Play = append(g.Play[:l], g.Play[l+1:]...)
		g.AddBrides(BridesID, i)
	}
	g.Round = 1
	g.GameStage = 1
	return true
}
func (g *Game) HePlay(id int) bool {
	for _, p := range g.Brides {
		if p.id == id {
			return true
		}
	}
	fmt.Println("One")
	return false
}
func (g *Game) AddAnswer(id int, answer string) bool {
	for i, p := range g.Brides {
		if p.id == id {
			g.Brides[i].ans = answer
			return true
		}
	}
	return false
}
func (g *Game) AddQuest(q []string) {
	g.Question = strings.Join(q, " ")
}
func (g *Game) EndQuest(vk *api.VK, yes bool) {
	quest := "üíç–í–û–ü–†–û–° –ñ–ï–ù–ò–•–ê ‚Ññ" + strconv.Itoa(g.Round) + ": " + g.Question
	if yes == false {
		quest += "–í—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. üíç–û–¢–í–ï–¢–´ –ù–ï–í–ï–°–¢üíç:\n"
	} else {
		quest += "üíç–û–¢–í–ï–¢–´ –ù–ï–í–ï–°–¢üíç:\n"
	}
	for i, p := range g.Brides {
		if p.ans != "" {
			quest += "ü•Ä" + strconv.Itoa(p.number) + "ü•Ä: " + p.ans + "\n"
			g.Brides[i].ans = ""
		} else {
			quest += "–ù–µ–≤–µ—Å—Ç–∞ ü•Ä" + strconv.Itoa(p.number) + "ü•Ä –ø—Ä–æ—Å–ø–∞–ª–∞! –ï—é –±—ã–ª–∞ [id" + strconv.Itoa(p.id) + "|" + GiveName(vk, p.id) + "]" + "\n"
			g.Brides = append(g.Brides[:i], g.Brides[i+1:]...)
		}
		g.GameStage = 4
	}
	SendMessege(vk, quest, ChatID)
	SendMessege(vk, quest, g.Groom)
	SendMessege(vk, "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∫–∏–∫–Ω—É—Ç—å –Ω–≤–µ—Å—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫–∏–∫ <–Ω–æ–º–µ—Ä>", g.Groom)
}
func (g *Game) KikOne(vk *api.VK, mess []string) bool {
	numb := strings.Join(mess[:1], "")
	mess = mess[1:]
	number, err := strconv.Atoi(numb)
	if err != nil {
		return false
	}
	id := g.GetIdNumberBrides(0, number)
	i := g.DeleteBrides(0, number)
	if i == false {
		return false
	}
	SendMessege(vk, "üíî–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç –Ω–µ–≤–µ—Å—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º  "+numb+". –ï—é –±—ã–ª–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è [id"+strconv.Itoa(id)+"|"+GiveName(vk, id)+"]"+"\n", ChatID)
	SendMessege(vk, "–í—ã –∫–∏–∫–Ω—É–ª–∏ –Ω–µ–≤–µ—Å—Ç—É –Ω–æ–º–µ—Ä "+numb+". –ï—é –±—ã–ª–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è [id"+strconv.Itoa(id)+"|"+GiveName(vk, id)+"]"+"\n", g.Groom)
	if len(mess) >= 1 {
		comment := strings.Join(mess, " ")
		SendMessege(vk, "‚ú®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∂–µ–Ω–∏—Ö–∞: "+comment, ChatID)
		SendMessege(vk, "‚ú®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∂–µ–Ω–∏—Ö–∞: "+comment, g.Groom)
	}
	return true

}
func (g *Game) Propus(vk *api.VK, mes []string) bool {
	if g.Propulsion == 1 {
		g.Propulsion = 0
		SendMessege(vk, "–ñ–µ–Ω–∏—Ö —Ä–µ—à–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ—Ö –Ω–µ–≤–µ—Å—Ç!", ChatID)
		SendMessege(vk, "–ñ–µ–Ω–∏—Ö —Ä–µ—à–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ—Ö –Ω–µ–≤–µ—Å—Ç!", g.Groom)
		if len(mes) >= 1 {
			comment := strings.Join(mes, " ")
			SendMessege(vk, "‚ú®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∂–µ–Ω–∏—Ö–∞: "+comment, ChatID)
			SendMessege(vk, "‚ú®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∂–µ–Ω–∏—Ö–∞: "+comment, g.Groom)
		}
		return true
	} else {
		return false
	}
}
func (g *Game) ConstPlayer() int {
	ans := 0
	for i, _ := range g.Brides {
		ans += 1
		if i > 0 {
		}
	}
	return ans
}
func (g *Game) ConstPlayer2() int {
	ans := 0
	for i, _ := range g.Play {
		ans += 1
		if i > 0 {
		}
	}
	return ans
}
func (g *Game) AllEND() bool {
	for _, p := range g.Brides {
		fmt.Println(p.ans)
		if p.ans == "" {
			return false
		}
	}
	return true
}
func (g *Game) NewRound(vk *api.VK) {
	g.Round += 1
	g.GameStage = 2
	SendMessege(vk, "–†–∞—É–Ω–¥ "+strconv.Itoa(g.Round)+" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", ChatID)
	SendMessege(vk, "–†–∞—É–Ω–¥ "+strconv.Itoa(g.Round)+" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–≤–æ–ø—Ä–æ—Å", g.Groom)
	for _, p := range g.Brides {
		SendMessege(vk, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –≤ —Ä–∞—É–Ω–¥ "+strconv.Itoa(g.Round)+". –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–∞ –∂–µ–Ω–∏—Ö–∞!", p.id)
	}

}
func (g *Game) GetQuest(vk *api.VK, obj events.MessageNewObject) {
	mes := strings.Split(obj.Message.Text, " ")
	if mes[0] == "!–≤–æ–ø—Ä–æ—Å" {
		ans := mes[1:]
		if len(ans) > 0 {
			g.AddQuest(ans)
			SendMessege(vk, "–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–µ—Å—Ç!", g.Groom)
			SendMessege(vk, "üíç–í–û–ü–†–û–° –ñ–ï–ù–ò–•–ê ‚Ññ"+strconv.Itoa(g.Round)+"\n"+g.Question, ChatID)
			for _, p := range g.Brides {
				SendMessege(vk, "üíç–í–û–ü–†–û–° –ñ–ï–ù–ò–•–ê ‚Ññ"+strconv.Itoa(g.Round)+"\n"+g.Question, p.id)
				SendMessege(vk, "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–æ—Ç–≤–µ—Ç <–æ—Ç–≤–µ—Ç> ", p.id)

			}
			g.GameStage = 3
		} else {
			SendMessege(vk, "–ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å—É–π—Ç–µ \n !–≤–æ–ø—Ä–æ—Å <–≤–æ–ø—Ä–æ—Å>", g.Groom)
		}
	} else {
		SendMessege(vk, "–ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å—É–π—Ç–µ \n !–≤–æ–ø—Ä–æ—Å <–≤–æ–ø—Ä–æ—Å>", g.Groom)
	}

}
func (g *Game) ENDGAME(vk *api.VK) *Game {
	bride := g.Brides[0].id
	groom := g.Groom
	SendMessege(vk, "–ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!\n üëë–ú—ã –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–∂—ë–Ω–æ–≤!\n –ñ–µ–Ω–∏—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π(–∞—è): [id"+strconv.Itoa(groom)+"|"+GiveName(vk, groom)+"\n –ù–µ–≤–µ—Å—Ç–∞ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π(–∞—è): [id"+strconv.Itoa(bride)+"|"+GiveName(vk, bride)+"]", ChatID)
	SendMessege(vk, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–ø–∏—à–∏—Ç–µ !–Ω–µ–≤–µ—Å—Ç—ã", ChatID)
	g = NewGame()
	return g
}
func main() {
	g := NewGame()
	for {
		Vk(g)
	}
}
func Vk(g *Game) {
	token := "vk1.a.bCp6Il1J3O9wePPDU9ElvErT85_z7SiQW-OPF45Ui5zdtsJq2r8HsRvywZ03F4x1RBef7yGeovc34H6iKzWv5ium29LVbJkefFtR7em7Qt0VrUbjum6PAIVoXTp4KNTf6jO-IKTGaZkVduFzcl11SZNFjiwylQrJhyOYX4aqhLf-bAswUkkXn5LBAe02kd8R" // use os.Getenv("TOKEN")
	vk := api.NewVK(token)
	// get information about the group
	group, err := vk.GroupsGetByID(nil)
	if err != nil {
		log.Println(err)
	}
	// Initializing Long Poll
	lp, err := longpoll.NewLongPoll(vk, group[0].ID)
	if err != nil {
		log.Println(err)
	}

	// New message event
	lp.MessageNew(func(_ context.Context, obj events.MessageNewObject) {
		g = Games(g, vk, obj)

	})

	// Run Bots Long Poll
	log.Println("Start Long Poll")
	if err := lp.Run(); err != nil {
		log.Println(err)
	}

}
func SendMessege(vk *api.VK, text string, id int) {
	b := params.NewMessagesSendBuilder()
	b.Message(text)
	b.RandomID(0)
	b.PeerID(id)
	_, err := vk.MessagesSend(b.Params)
	if err != nil {
		log.Fatal(err)
	}
}
func GiveName(vk *api.VK, id int) string {
	users, err := vk.UsersGet(api.Params{"user_ids": id})
	if err != nil {
		return "–ò–≤–∞–Ω –ò–≤–∞–Ω—ã—á"
	}
	return users[0].FirstName + " " + users[0].LastName
}
func Games(g *Game, vk *api.VK, obj events.MessageNewObject) *Game {
	switch g.GameStage {
	case 0:
		if obj.Message.PeerID == ChatID {
			{
				if obj.Message.Text == "!–Ω–µ–≤–µ—Å—Ç—ã" {
					g.GameStage = 1
					SendMessege(vk, "–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É –Ω–∞—á–∞—Ç!", ChatID)
				}
			}
		}
	case 1:
		{
			switch obj.Message.PeerID {
			case ChatID:
				if obj.Message.Text == "!—Å—Ç–∞—Ä—Ç" {
					i := g.StartGame()
					if i == false {
						SendMessege(vk, "–ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –±—ã—Ç—å –∂–µ–Ω–∏—Ö–æ–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–≤–µ—Å—Ç!", ChatID)
						return g
					}
					SendMessege(vk, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–∞ –∂–µ–Ω–∏—Ö–∞!", ChatID)
					for _, p := range g.Brides {
						fmt.Println(p.id)
						SendMessege(vk, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –Ω–µ–≤–µ—Å—Ç–∞ "+strconv.Itoa(p.number)+". –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–∞ –∂–µ–Ω–∏—Ö–∞", p.id)
					}
					fmt.Println(g.Groom)
					SendMessege(vk, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∂–µ–Ω–∏—Ö! –ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n!–≤–æ–ø—Ä–æ—Å <–≤–æ–ø—Ä–æ—Å>", g.Groom)
					g.GameStage = 2
				}
			default:
				switch obj.Message.Text {
				case "!+":
					{
						i := g.AddPlayer(obj.Message.FromID)
						if i == false {
							SendMessege(vk, "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –∏–≥—Ä—É!", obj.Message.FromID)
							return g
						}
						SendMessege(vk, "–ö–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤: "+strconv.Itoa(g.ConstPlayer2()), ChatID)
						SendMessege(vk, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ –∏–≥—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ!", obj.Message.FromID)
					}
				case "!-":
					{
						i := g.DeletePlayer(obj.Message.FromID)
						if i == false {
							SendMessege(vk, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ!", obj.Message.FromID)
							return g
						}
						SendMessege(vk, "–ö–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤: "+strconv.Itoa(g.ConstPlayer2()), ChatID)
						SendMessege(vk, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ —Å –Ω–∞–±–æ—Ä–∞!", obj.Message.FromID)
					}
				case "!+–∂–µ–Ω–∏—Ö":
					{
						i := g.AddWantGroom(obj.Message.FromID)
						if i == false {
							SendMessege(vk, "–í—ã –ª–∏–±–æ –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –∏–≥—Ä—É, –ª–∏–±–æ —É–∂–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∂–µ–Ω–∏—Ö–æ–º!", obj.Message.FromID)
							return g
						}
						SendMessege(vk, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∂–µ–Ω–∏—Ö–æ–º!", obj.Message.FromID)

					}
				case "!-–∂–µ–Ω–∏—Ö":
					{
						i := g.DeleteWantGroom(obj.Message.FromID)
						if i == false {
							SendMessege(vk, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∂–µ–Ω–∏—Ö–æ–º!", obj.Message.FromID)
							return g
						}
						SendMessege(vk, "–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∂–µ–Ω–∏—Ö–æ–º!", obj.Message.FromID)
					}
				}
			}

		}
	case 2:
		{
			switch obj.Message.PeerID {
			case g.Groom:
				{
					g.GetQuest(vk, obj)
				}
			case ChatID:
				{
					switch obj.Message.Text {
					case "!–∏–Ω—Ñ–∞":
						{
							SendMessege(vk, "–ö–æ–ª-–≤–æ –Ω–µ–≤–µ—Å—Ç: "+strconv.Itoa(g.ConstPlayer()), ChatID)
						}
					case "!—Å–±—Ä–æ—Å":
						if obj.Message.FromID == ModerId {
							SendMessege(vk, "–í–∞—à–∞ –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!", ChatID)
							g = NewGame()
						} else {
							SendMessege(vk, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ChatID)
						}
					}
				}
			default:
				if g.HePlay(obj.Message.FromID) {
					SendMessege(vk, "–û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–∞ –∂–µ–Ω–∏—Ö–∞!", obj.Message.FromID)
				} else {
					SendMessege(vk, "–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π", obj.Message.FromID)
				}
			}

		}
	case 3:
		{
			switch obj.Message.PeerID {
			case ChatID:
				{
					switch obj.Message.Text {
					case "!–∏–Ω—Ñ–∞":
						{
							SendMessege(vk, "–ö–æ–ª-–≤–æ –Ω–µ–≤–µ—Å—Ç: "+strconv.Itoa(g.ConstPlayer()), ChatID)
						}
					case "!—Å–±—Ä–æ—Å":
						if obj.Message.FromID == ModerId {
							SendMessege(vk, "–í–∞—à–∞ –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!", ChatID)
							g = NewGame()
						} else {
							SendMessege(vk, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ChatID)
						}
					case "!—Å–∫–∏–ø":
						{
							if obj.Message.FromID == ModerId {
								SendMessege(vk, "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–µ–≤–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω–æ!", ChatID)
								g.EndQuest(vk, false)
							} else {
								SendMessege(vk, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ChatID)
							}
						}
					}
				}
			case g.Groom:
				{
					SendMessege(vk, "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–µ—Å—Ç!", g.Groom)
				}

			default:
				{
					fmt.Println()
					if g.HePlay(obj.Message.PeerID) {
						mes := strings.Split(obj.Message.Text, " ")
						if mes[0] == "!–æ—Ç–≤–µ—Ç" {
							if len(mes[1:]) > 0 {
								answ := strings.Join(mes[1:], " ")
								i := g.AddAnswer(obj.Message.FromID, answ)
								if i == true {
									SendMessege(vk, "–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!", obj.Message.FromID)
									println(g.Brides)
									if g.AllEND() {
										g.EndQuest(vk, true)
									}
								} else {
									SendMessege(vk, "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n !–æ—Ç–≤–µ—Ç <–æ—Ç–≤–µ—Ç>", obj.Message.FromID)
								}
							} else {
								SendMessege(vk, "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n !–æ—Ç–≤–µ—Ç <–æ—Ç–≤–µ—Ç>", obj.Message.FromID)
							}
						} else {
							SendMessege(vk, "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n !–æ—Ç–≤–µ—Ç <–æ—Ç–≤–µ—Ç>", obj.Message.FromID)
						}
					} else {
						SendMessege(vk, "–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π", obj.Message.FromID)
					}
				}

			}
		}
	case 4:
		switch obj.Message.PeerID {
		case ChatID:
			{
				switch obj.Message.Text {
				case "!–∏–Ω—Ñ–∞":
					{
						SendMessege(vk, "–ö–æ–ª-–≤–æ –Ω–µ–≤–µ—Å—Ç: "+strconv.Itoa(g.ConstPlayer()), ChatID)
					}
				case "!—Å–±—Ä–æ—Å":
					if obj.Message.FromID == ModerId {
						SendMessege(vk, "–í–∞—à–∞ –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!", ChatID)
						g = NewGame()
					} else {
						SendMessege(vk, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ChatID)
					}
				}
			}
		case g.Groom:
			{
				mes := strings.Split(obj.Message.Text, " ")
				if mes[0] == "!–∫–∏–∫" && len(mes[1:]) >= 1 {
					i := g.KikOne(vk, mes[1:])
					if i == false {
						SendMessege(vk, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä", g.Groom)
					}
					if g.ConstPlayer() >= 2 {
						g.NewRound(vk)
					} else {
						g = g.ENDGAME(vk)
					}

				} else if mes[0] == "!–ø—Ä–æ–ø—É—Å–∫" {
					i := g.Propus(vk, mes[1:])
					if i == false {
						SendMessege(vk, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞!", g.Groom)
					} else {
						g.NewRound(vk)
					}
				} else {
					SendMessege(vk, "–î–ª—è –∫–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫–∏–∫ <–Ω–æ–º–µ—Ä> <–∫–æ–º–º–µ–Ω—Ç>\n –ß—Ç–æ –±—ã –ø—Ä–æ–ø—É—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–ø—Ä–æ–ø—É—Å–∫ <–∫–æ–º–º–µ–Ω—Ç>", g.Groom)
				}
			}
		default:
			{
				if g.HePlay(obj.Message.FromID) {
					SendMessege(vk, "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ –∂–µ–Ω–∏—Ö –∫–∏–∫–Ω–µ—Ç –Ω–µ–≤–µ—Å—Ç—É!", obj.Message.FromID)
				}
			}

		}

	}
	return g
}
